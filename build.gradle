plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.4"
    id("io.micronaut.aot") version "4.4.4"
}

version = "0.1.0"
group = "datasahi.flow"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut:micronaut-http-client")

    implementation 'com.moilioncircle:redis-replicator:3.8.1'
    implementation 'org.json:json:20250107'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation('org.apache.commons:commons-jexl3:3.4.0')
    implementation("org.apache.commons:commons-lang3:3.12.0")

    implementation("org.sql2o:sql2o:1.6.0")
    implementation("com.zaxxer:HikariCP:5.0.1")

    // internal database
    implementation("org.mapdb:mapdb:3.1.0")
    implementation("org.rocksdb:rocksdbjni:9.10.0")

    // all database drivers
    implementation("redis.clients:jedis:5.2.0")
    implementation("com.mysql:mysql-connector-j:9.2.0")
    implementation("com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11")
    implementation("org.apache.activemq:activemq-client:5.16.3")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")

    testImplementation("io.micronaut:micronaut-http-client")
}


application {
    mainClass = "datasahi.flow.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("datasahi.flow.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "17"
}

tasks.register('bundleZip', Zip) {
    dependsOn shadowJar
    from(layout.buildDirectory.dir("libs")) {
        include '*-all.jar'
    }
    from('src/main/tools') {
        include '*.*'
    }
    archiveFileName = "datasahi-flow-bundle-${version}.zip"
    destinationDirectory = layout.buildDirectory.dir("distributions")
}

// Create tar.gz file
tasks.register('bundleTar', Tar) {
    dependsOn shadowJar

    from(layout.buildDirectory.dir("libs")) {
        include '*-all.jar'
    }
    from('src/main/tools') {
        include '*.*'
    }
    archiveFileName = "datasahi-flow-bundle-${version}.tar.gz"
    destinationDirectory = layout.buildDirectory.dir("distributions")
    compression = Compression.GZIP
}

tasks.register('bundleDistribution') {
    group = 'distribution'
    description = 'Creates distribution bundles containing build/libs jar and src/tools folder contents'
    dependsOn bundleZip
    dependsOn bundleTar
}